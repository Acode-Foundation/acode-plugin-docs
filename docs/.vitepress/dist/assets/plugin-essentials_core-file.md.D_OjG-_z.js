import{_ as i,c as s,o as a,a1 as n}from"./chunks/framework.BlxYlo1f.js";const u=JSON.parse('{"title":"Plugin Main File","description":"","frontmatter":{},"headers":[],"relativePath":"plugin-essentials/core-file.md","filePath":"plugin-essentials/core-file.md"}'),e={name:"plugin-essentials/core-file.md"},t=n(`<h1 id="plugin-main-file" tabindex="-1">Plugin Main File <a class="header-anchor" href="#plugin-main-file" aria-label="Permalink to &quot;Plugin Main File&quot;">​</a></h1><p>The <code>main.js</code>(can be of any name but that must be specified in <code>plugin.json</code>) file is the heart of your Acode plugin, serving as the entry point and execution hub when the plugin is loaded. Here we&#39;ll explore the essential concept of <code>main.js</code>, focusing on initialization, registration, and cleanup.</p><h2 id="plugin-initialization" tabindex="-1">Plugin Initialization <a class="header-anchor" href="#plugin-initialization" aria-label="Permalink to &quot;Plugin Initialization&quot;">​</a></h2><h3 id="entry-point-for-your-plugin" tabindex="-1">Entry Point for Your Plugin <a class="header-anchor" href="#entry-point-for-your-plugin" aria-label="Permalink to &quot;Entry Point for Your Plugin&quot;">​</a></h3><p>The <code>main.js</code> file acts as the entry point for your Acode plugin. It is executed upon loading, providing the ideal space to initialize and configure your plugin.</p><h3 id="access-to-acode-api" tabindex="-1">Access to Acode API <a class="header-anchor" href="#access-to-acode-api" aria-label="Permalink to &quot;Access to Acode API&quot;">​</a></h3><p>Within <code>main.js</code>, you gain access to the Acode API through the global variable <a href="./../global-apis/acode.html">acode</a>. This variable serves as your gateway to interact with various Acode methods, enabling seamless integration of your plugin with the editor.</p><h3 id="registering-your-plugin" tabindex="-1">Registering Your Plugin <a class="header-anchor" href="#registering-your-plugin" aria-label="Permalink to &quot;Registering Your Plugin&quot;">​</a></h3><p>To register your plugin, utilize the <code>acode.setPluginInit(pluginId: string, init: Function)</code> method. This method requires two parameters:</p><ol><li><p><strong>pluginId:</strong></p><ul><li>The unique identifier for your plugin.</li></ul></li><li><p><strong>init function:</strong></p><ul><li>The function to be executed when the plugin is loaded.</li></ul></li></ol><p>Upon execution, the <code>init</code> function will receive three parameters:</p><ul><li><p><strong>baseUrl (string):</strong></p><ul><li>The base URL of the plugin, allowing access to files within the plugin directory.</li></ul></li><li><p><strong>$page (WcPage):</strong></p><ul><li>A page object that facilitates the display of content within Acode.</li></ul></li><li><p><strong>cache (object):</strong></p><ul><li>An object providing access to cached files, including: <ul><li><strong>cacheFileUrl (string):</strong><ul><li>URL of the cached file.</li></ul></li><li><strong>cacheFile (File):</strong><ul><li>File object of the cached file, enabling file read/write operations.</li></ul></li></ul></li></ul></li></ul><h3 id="example-main-js-file" tabindex="-1">Example main.js File <a class="header-anchor" href="#example-main-js-file" aria-label="Permalink to &quot;Example main.js File&quot;">​</a></h3><p>Here&#39;s an illustrative example of a <code>main.js</code> file:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">acode.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setPluginInit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;com.example.plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">baseUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">commands</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> editorManager.editor;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  commands.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;example-plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bindKey: { win: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Ctrl-Alt-E&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mac: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Command-Alt-E&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      $page.innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &lt;h1&gt;Example Plugin&lt;/h1&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &lt;p&gt;This is an example plugin.&lt;/p&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      \`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      $page.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="plugin-unmount-function" tabindex="-1">Plugin Unmount Function <a class="header-anchor" href="#plugin-unmount-function" aria-label="Permalink to &quot;Plugin Unmount Function&quot;">​</a></h2><p>The <code>main.js</code> file must also define an unmount function, which is called when the plugin is unloaded or uninstalled. This function allows you to perform cleanup operations associated with your plugin.</p><h3 id="example-unmount-function" tabindex="-1">Example Unmount Function <a class="header-anchor" href="#example-unmount-function" aria-label="Permalink to &quot;Example Unmount Function&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">acode.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setPluginUnmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;com.example.plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">commands</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> editorManager.editor;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  commands.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;example-plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>In this example, the unmount function removes the &#39;example-plugin&#39; command, ensuring that the plugin&#39;s impact on Acode is cleanly reverted upon unloading.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You will not need to write this <code>unmount</code> or <code>initialize</code> functions for your plugin because templates comes with it , just you will need to write your plugin code inside the <code>AcodePlugin class</code></p></div>`,21),l=[t];function h(p,o,r,d,k,c){return a(),s("div",null,l)}const E=i(e,[["render",h]]);export{u as __pageData,E as default};
